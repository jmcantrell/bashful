#!/usr/bin/env bash

# Filename:      bashful-execute
# Description:   Functions for building commands.
# Maintainer:    Jeremy Cantrell <jmcantrell@gmail.com>
# Last Modified: Wed 2012-03-28 22:33:16 (-0400)

# <doc:bashful-execute> {{{
#
# The execute library provides functions for building and executing commands.
#
# </doc:bashful-execute> }}}

if (( ${BASH_LINENO:-0} == 0 )); then
    source bashful-doc
    doc_execute "$0" "$@"
    exit
fi

[[ $BASHFUL_EXECUTE_LOADED ]] && return

execute() #{{{1
{
    # <doc:execute> {{{
    #
    # Execute a given command or stored command.
    #
    # Usage: execute [ARGUMENT...]
    #
    # </doc:execute> }}}

    "${EXECUTE_CMD[@]}" "$@"
}

execute_in() #{{{1
{
    # <doc:execute_in> {{{
    #
    # Execute a command in a given directory.
    #
    # Usage: execute_in DIRECTORY [COMMAND...]
    #
    # </doc:execute_in> }}}

    local OPWD=$PWD; cd "$1"; shift
    execute "$@"; error=$?
    cd "$OPWD"
    return $error
}

execute_push() #{{{1
{
    # <doc:execute_push> {{{
    #
    # Add an argument to the stored command.
    #
    # Usage: execute_push [ARGUMENT...]
    #
    # </doc:execute_push> }}}

    EXECUTE_CMD+=("$@")
}

execute_pop() #{{{1
{
    # <doc:execute_pop> {{{
    #
    # Remove the last (or given number) argument for the stored command.
    #
    # Usage: execute_pop [NUM_OF_ARGS]
    #
    # </doc:execute_pop> }}}

    local i
    for (( i=0; i<${1:-1}; i++ )); do
        unset EXECUTE_CMD[${#EXECUTE_CMD[@]}-1]
    done
}

execute_clear() #{{{1
{
    # <doc:execute_clear> {{{
    #
    # Clear stored commands.
    #
    # Usage: execute_clear
    #
    # </doc:execute_clear> }}}

    unset EXECUTE_CMD
}

check_rc() #{{{1
{
  # <doc:check_rc> {{{
  #
  # Checks return code and either errors out or prints message.
  #
  # Usage: check_rc [-m MESSAGE] [-e EXIT]
  #
  # </doc:execute_clear> }}}
  local rc=$?
  local msg
  local ex=1

  unset OPTIND
  while getopts ":m:e" option; do
      case $option in
          n) msg=$OPTARG ;;
          e) ex=$OPTARG ;;
      esac
  done && shift $(($OPTIND - 1))

  if [[ $rc -gt 0 ]]; then
    if [[ -z $msg ]]; then
      # Display message if exists
      echo -e $msg
    fi
    if [[ truth $msg -eq 1 ]];
      # When exiting, do
      exit $rc
    else
      # Bounce RC back if no exit is used
      return $rc
    fi
  fi
}

#}}}1

BASHFUL_EXECUTE_LOADED=1
